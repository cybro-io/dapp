/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type CreateTransactionApiV1ExchangeAddressCountGetType = typeof CreateTransactionApiV1ExchangeAddressCountGetType[keyof typeof CreateTransactionApiV1ExchangeAddressCountGetType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTransactionApiV1ExchangeAddressCountGetType = {
  All: 'All',
  Swap: 'Swap',
  Exchange: 'Exchange',
} as const;

export type CreateTransactionApiV1ExchangeAddressCountGetParams = {
type: CreateTransactionApiV1ExchangeAddressCountGetType;
};

export type GetTransactionsApiV1ExchangeAddressTransactionsGetType = typeof GetTransactionsApiV1ExchangeAddressTransactionsGetType[keyof typeof GetTransactionsApiV1ExchangeAddressTransactionsGetType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTransactionsApiV1ExchangeAddressTransactionsGetType = {
  All: 'All',
  Swap: 'Swap',
  Exchange: 'Exchange',
} as const;

export type GetTransactionsApiV1ExchangeAddressTransactionsGetParams = {
type: GetTransactionsApiV1ExchangeAddressTransactionsGetType;
limit?: number;
offset?: number;
};

export type GetPostsApiV1DashboardPostsGetParams = {
limit?: number;
offset?: number;
};

export type GetDashboardStatsApiV1DashboardAddressStatsGetTimeframe = typeof GetDashboardStatsApiV1DashboardAddressStatsGetTimeframe[keyof typeof GetDashboardStatsApiV1DashboardAddressStatsGetTimeframe];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDashboardStatsApiV1DashboardAddressStatsGetTimeframe = {
  Today: 'Today',
  Week: 'Week',
  Month: 'Month',
  Year: 'Year',
  All: 'All',
} as const;

export type GetDashboardStatsApiV1DashboardAddressStatsGetParams = {
timeframe: GetDashboardStatsApiV1DashboardAddressStatsGetTimeframe;
};

export type GetDashboardHistoryApiV1DashboardAddressHistoryGetParams = {
chain_id: number;
since: number;
to: number;
};

export type GetPriceApiV1MarketDataPriceGetParams = {
token: string;
chain_id: number;
};

export type GetPaymentLinkApiV1ProfileAddressPaymentLinkGetParams = {
to_currency: string;
from_currency: string;
from_amount: number;
};

export type GetBalanceByAddressApiV1ProfileAddressBalanceGetParams = {
chain_id: number;
};

export type AddWalletApiV1ProfileAddressPutParams = {
chain_id: number;
};

export type GetVaultApiV1VaultsVaultIdGetParams = {
address?: string;
};

export type GetFeaturedVaultsApiV1VaultsFeaturedGetParams = {
limit?: number;
offset?: number;
};

export type GetVaultsApiV1VaultsGetParams = {
limit?: number;
offset?: number;
sort_by?: SortValue;
ascending?: boolean;
address?: string;
};

export type WaitlistResponseError = string | null;

export interface WaitlistResponse {
  data: null;
  error?: WaitlistResponseError;
  ok: boolean;
}

export interface VaultsResponseData {
  address: string;
  apy: number;
  badges: BadgeVaultsResponseData[];
  balance: number;
  balance_usd: number;
  chain: string;
  chain_id: number;
  description: string;
  icon: string;
  id: number;
  name: string;
  points: number;
  provider: ProviderVaultsResponseData;
  token: TokenResponseData;
  trust_score: number;
  tvl: number;
}

export type VaultsResponseError = string | null;

export type VaultsResponseDataProperty = VaultsResponseData[] | null;

export interface VaultsResponse {
  data?: VaultsResponseDataProperty;
  error?: VaultsResponseError;
  ok: boolean;
}

export type VaultResponseError = string | null;

export type VaultResponseDataProperty = VaultResponseData | null;

export interface VaultResponse {
  data?: VaultResponseDataProperty;
  error?: VaultResponseError;
  ok: boolean;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface TokenResponseData {
  address: string;
  decimals: number;
  name: string;
}

export interface VaultResponseData {
  abi: unknown;
  address: string;
  apy: number;
  auditors: AuditorResponseData[];
  badges: BadgeVaultsResponseData[];
  balance: number;
  chain: string;
  chain_id: number;
  description: string;
  icon: string;
  id: number;
  name: string;
  overall_investments: number;
  overall_investments_usd: string;
  points: number;
  provider: ProviderVaultsResponseData;
  token: TokenResponseData;
  trust_score: number;
  tvl: number;
}

export type TVLResponseError = string | null;

export interface TVLData {
  tvl: number;
}

export interface TVLResponse {
  data: TVLData;
  error?: TVLResponseError;
  ok: boolean;
}

export interface SymbiosisData {
  chain_id: number;
  transaction_hash: string;
}

export type SortValue = typeof SortValue[keyof typeof SortValue];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortValue = {
  name: 'name',
  apy: 'apy',
  tvl: 'tvl',
  provider: 'provider',
  trust_score: 'trust_score',
} as const;

export type RefCodeResponseError = string | null;

export interface RefCodeResponse {
  data: string;
  error?: RefCodeResponseError;
  ok: boolean;
}

export interface ProviderVaultsResponseData {
  description: string;
  name: string;
  short_description: string;
}

export interface ProfilePointsResponseData {
  points: number;
  ref_points: number;
}

export type ProfilePointsResponseError = string | null;

export type ProfilePointsResponseDataProperty = ProfilePointsResponseData | null;

export interface ProfilePointsResponse {
  data?: ProfilePointsResponseDataProperty;
  error?: ProfilePointsResponseError;
  ok: boolean;
}

export type PriceResponseError = string | null;

export interface PriceData {
  price: string;
}

export type PriceResponseData = PriceData | null;

export interface PriceResponse {
  data?: PriceResponseData;
  error?: PriceResponseError;
  ok: boolean;
}

export type PostsResponseError = string | null;

export interface PostResponse {
  link: string;
  name: string;
  short_description: string;
}

export type PostsResponseData = PostResponse[] | null;

export interface PostsResponse {
  data?: PostsResponseData;
  error?: PostsResponseError;
  ok: boolean;
}

export type PaymentLinkResponseError = string | null;

export interface PaymentLinkData {
  link: string;
}

export interface PaymentLinkResponse {
  data: PaymentLinkData;
  error?: PaymentLinkResponseError;
  ok: boolean;
}

export interface MunzenCurrencyData {
  description: string;
  ticker: string;
}

export type MunzenCurrenciesResponseError = string | null;

export interface MunzenCurrenciesData {
  currencies: MunzenCurrencyData[];
  type: string;
}

export interface MunzenCurrenciesResponse {
  data: MunzenCurrenciesData[];
  error?: MunzenCurrenciesResponseError;
  ok: boolean;
}

export type HistoryTrustScoreResponseDataDirection = typeof HistoryTrustScoreResponseDataDirection[keyof typeof HistoryTrustScoreResponseDataDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HistoryTrustScoreResponseDataDirection = {
  '+': '+',
  '-': '-',
} as const;

export interface HistoryTrustScoreResponseData {
  date: string;
  description: string;
  direction: HistoryTrustScoreResponseDataDirection;
  name: string;
  trust_score: number;
}

export type HistoryTrustScoreResponseError = string | null;

export type HistoryTrustScoreResponseDataProperty = HistoryTrustScoreResponseData[] | null;

export interface HistoryTrustScoreResponse {
  data?: HistoryTrustScoreResponseDataProperty;
  error?: HistoryTrustScoreResponseError;
  ok: boolean;
}

export interface HistoryAPYResponseData {
  apy: number;
  month: string;
}

export type HistoryAPYResponseError = string | null;

export type HistoryAPYResponseDataProperty = HistoryAPYResponseData[] | null;

export interface HistoryAPYResponse {
  data?: HistoryAPYResponseDataProperty;
  error?: HistoryAPYResponseError;
  ok: boolean;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type GetWalletResponseError = string | null;

export type GetWalletResponseData = GetWalletData | null;

export interface GetWalletResponse {
  data?: GetWalletResponseData;
  error?: GetWalletResponseError;
  ok: boolean;
}

export type GetWalletDataTermsAccepted = boolean | null;

export type GetWalletDataReferrer = string | null;

export interface GetWalletData {
  affiliate_balance: string;
  balance: number;
  balance_change: string;
  balance_usd: string;
  claimable_yield_enrolled: boolean;
  points: number;
  ref_bonus_used: boolean;
  ref_points: number;
  referrer: GetWalletDataReferrer;
  terms_accepted: GetWalletDataTermsAccepted;
}

export type GetVaultsQuantityResponseError = string | null;

export interface GetVaultsQuantityData {
  count: number;
}

export interface GetVaultsQuantityResponse {
  data: GetVaultsQuantityData;
  error?: GetVaultsQuantityResponseError;
  ok: boolean;
}

export type FeedbackResponseError = string | null;

export interface FeedbackResponse {
  data?: null;
  error?: FeedbackResponseError;
  ok: boolean;
}

export interface FeedbackBody {
  /** @pattern ^(0x)[0-9a-fA-F]{40}$ */
  address: string;
  captcha_answer: string;
  email: string;
  /** @maxLength 500 */
  text: string;
}

export type FeaturedVaultsResponseError = string | null;

export interface FeaturedVaultResponse {
  sortable_rank: number;
  vault_id: number;
}

export type FeaturedVaultsResponseData = FeaturedVaultResponse[] | null;

export interface FeaturedVaultsResponse {
  data?: FeaturedVaultsResponseData;
  error?: FeaturedVaultsResponseError;
  ok: boolean;
}

export interface ExchangeHistoryDataPoint {
  chain_id: number;
  size: string;
  token: string;
}

export type ExchangeTransactionDataSource = ExchangeHistoryDataPoint | null;

export type ExchangeTransactionDataDestination = ExchangeHistoryDataPoint | null;

export interface ExchangeTransactionData {
  destination: ExchangeTransactionDataDestination;
  link: string;
  source: ExchangeTransactionDataSource;
  ts: string;
}

export type ExchangeGetTransactionsResponseError = string | null;

export interface ExchangeGetTransactionsResponse {
  data: ExchangeTransactionData[];
  error?: ExchangeGetTransactionsResponseError;
  ok: boolean;
}

export type ExchangeCreateTransactionResponseError = string | null;

export interface ExchangeCreateTransactionResponse {
  data?: null;
  error?: ExchangeCreateTransactionResponseError;
  ok: boolean;
}

export type ExchangeCountTransactionsResponseError = string | null;

export interface ExchangeCountTransactionsData {
  count: number;
}

export interface ExchangeCountTransactionsResponse {
  data: ExchangeCountTransactionsData;
  error?: ExchangeCountTransactionsResponseError;
  ok: boolean;
}

export interface EarnedYieldResponseData {
  last: string;
  total: string;
}

export type EarnedYieldResponseError = string | null;

export interface EarnedYieldResponse {
  data?: EarnedYieldResponseDataProperty;
  error?: EarnedYieldResponseError;
  ok: boolean;
}

export type EarnedYieldResponseDataPropertyAnyOf = {[key: string]: EarnedYieldResponseData};

export type EarnedYieldResponseDataProperty = EarnedYieldResponseDataPropertyAnyOf | null;

export interface DashboardStatsVaultsData {
  balance: string;
  balance_usd: string;
  icon: string;
  id: number;
  name: string;
}

export type DashboardStatsResponseError = string | null;

export type DashboardStatsDataFutureBalanceUsd = string | null;

export type DashboardStatsDataApy = string | null;

export interface DashboardStatsData {
  accrued_yield: string;
  apy: DashboardStatsDataApy;
  future_balance_usd?: DashboardStatsDataFutureBalanceUsd;
  my_vaults: DashboardStatsVaultsData[];
  my_vaults_number: number;
  your_deposit: string;
}

export interface DashboardStatsResponse {
  data: DashboardStatsData;
  error?: DashboardStatsResponseError;
  ok: boolean;
}

export type DashboardHistoryResponseError = string | null;

export interface DashboardHistoryData {
  action: string;
  balance_usd: string;
  icon: string;
  name: string;
  size: string;
  size_usd: string;
  transaction_hash: string;
  ts: string;
}

export interface DashboardHistoryResponse {
  data: DashboardHistoryData[];
  error?: DashboardHistoryResponseError;
  ok: boolean;
}

export interface CaptchaResponseData {
  sitekey: string;
}

export type CaptchaResponseError = string | null;

export interface CaptchaResponse {
  data: CaptchaResponseData;
  error?: CaptchaResponseError;
  ok: boolean;
}

export type BodyWebhookHandlerApiV1CommonMunzenWebhookPostPayload = { [key: string]: unknown };

export interface BodyWebhookHandlerApiV1CommonMunzenWebhookPost {
  payload: BodyWebhookHandlerApiV1CommonMunzenWebhookPostPayload;
  signature: string;
}

export interface BodyAddToWaitlistApiV1WaitlistSignupPost {
  captcha_answer: string;
  email: string;
}

export type BalancesResponseError = string | null;

export interface BalanceResponse {
  address: string;
  balance: number;
  balance_usd: number;
  name: string;
}

export interface BalancesResponse {
  data: BalanceResponse[];
  error?: BalancesResponseError;
  ok: boolean;
}

export type BadgeVaultsResponseDataIcon = string | null;

export interface BadgeVaultsResponseData {
  description: string;
  icon: BadgeVaultsResponseDataIcon;
  name: string;
  value: string;
}

export type AuditorResponseDataIcon = string | null;

export interface AuditorResponseData {
  icon: AuditorResponseDataIcon;
  name: string;
}

export type AddWalletResponseError = string | null;

export interface AddWalletResponse {
  data?: unknown;
  error?: AddWalletResponseError;
  ok: boolean;
}

export type AddActionResponseError = string | null;

export interface AddActionResponse {
  data?: null;
  error?: AddActionResponseError;
  ok: boolean;
}

export type AddActionBodyAction = typeof AddActionBodyAction[keyof typeof AddActionBodyAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddActionBodyAction = {
  deposit: 'deposit',
  withdraw: 'withdraw',
} as const;

export interface AddActionBody {
  action: AddActionBodyAction;
  /** @pattern ^(0x)[0-9a-fA-F]{40}$ */
  address: string;
  tx_hash: string;
}





/**
 * @summary Get Vaults
 */
export const getVaultsApiV1VaultsGet = (
    params?: GetVaultsApiV1VaultsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VaultsResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/vaults/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVaultsApiV1VaultsGetQueryKey = (params?: GetVaultsApiV1VaultsGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/vaults/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVaultsApiV1VaultsGetQueryOptions = <TData = Awaited<ReturnType<typeof getVaultsApiV1VaultsGet>>, TError = AxiosError<HTTPValidationError>>(params?: GetVaultsApiV1VaultsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultsApiV1VaultsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVaultsApiV1VaultsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVaultsApiV1VaultsGet>>> = ({ signal }) => getVaultsApiV1VaultsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVaultsApiV1VaultsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVaultsApiV1VaultsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getVaultsApiV1VaultsGet>>>
export type GetVaultsApiV1VaultsGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Vaults
 */
export const useGetVaultsApiV1VaultsGet = <TData = Awaited<ReturnType<typeof getVaultsApiV1VaultsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: GetVaultsApiV1VaultsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultsApiV1VaultsGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetVaultsApiV1VaultsGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Vaults Quantity
 */
export const getVaultsQuantityApiV1VaultsCountGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVaultsQuantityResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/vaults/count`,options
    );
  }


export const getGetVaultsQuantityApiV1VaultsCountGetQueryKey = () => {
    return [`https://dapp-api.cybro.io/api/v1/vaults/count`] as const;
    }

    
export const getGetVaultsQuantityApiV1VaultsCountGetQueryOptions = <TData = Awaited<ReturnType<typeof getVaultsQuantityApiV1VaultsCountGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultsQuantityApiV1VaultsCountGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVaultsQuantityApiV1VaultsCountGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVaultsQuantityApiV1VaultsCountGet>>> = ({ signal }) => getVaultsQuantityApiV1VaultsCountGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVaultsQuantityApiV1VaultsCountGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVaultsQuantityApiV1VaultsCountGetQueryResult = NonNullable<Awaited<ReturnType<typeof getVaultsQuantityApiV1VaultsCountGet>>>
export type GetVaultsQuantityApiV1VaultsCountGetQueryError = AxiosError<unknown>

/**
 * @summary Get Vaults Quantity
 */
export const useGetVaultsQuantityApiV1VaultsCountGet = <TData = Awaited<ReturnType<typeof getVaultsQuantityApiV1VaultsCountGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultsQuantityApiV1VaultsCountGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetVaultsQuantityApiV1VaultsCountGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Featured Vaults
 */
export const getFeaturedVaultsApiV1VaultsFeaturedGet = (
    params?: GetFeaturedVaultsApiV1VaultsFeaturedGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FeaturedVaultsResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/vaults/featured`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFeaturedVaultsApiV1VaultsFeaturedGetQueryKey = (params?: GetFeaturedVaultsApiV1VaultsFeaturedGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/vaults/featured`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFeaturedVaultsApiV1VaultsFeaturedGetQueryOptions = <TData = Awaited<ReturnType<typeof getFeaturedVaultsApiV1VaultsFeaturedGet>>, TError = AxiosError<HTTPValidationError>>(params?: GetFeaturedVaultsApiV1VaultsFeaturedGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeaturedVaultsApiV1VaultsFeaturedGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeaturedVaultsApiV1VaultsFeaturedGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeaturedVaultsApiV1VaultsFeaturedGet>>> = ({ signal }) => getFeaturedVaultsApiV1VaultsFeaturedGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFeaturedVaultsApiV1VaultsFeaturedGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFeaturedVaultsApiV1VaultsFeaturedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getFeaturedVaultsApiV1VaultsFeaturedGet>>>
export type GetFeaturedVaultsApiV1VaultsFeaturedGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Featured Vaults
 */
export const useGetFeaturedVaultsApiV1VaultsFeaturedGet = <TData = Awaited<ReturnType<typeof getFeaturedVaultsApiV1VaultsFeaturedGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: GetFeaturedVaultsApiV1VaultsFeaturedGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeaturedVaultsApiV1VaultsFeaturedGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetFeaturedVaultsApiV1VaultsFeaturedGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Vault
 */
export const getVaultApiV1VaultsVaultIdGet = (
    vaultId: number,
    params?: GetVaultApiV1VaultsVaultIdGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VaultResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/vaults/${vaultId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVaultApiV1VaultsVaultIdGetQueryKey = (vaultId: number,
    params?: GetVaultApiV1VaultsVaultIdGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/vaults/${vaultId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVaultApiV1VaultsVaultIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getVaultApiV1VaultsVaultIdGet>>, TError = AxiosError<HTTPValidationError>>(vaultId: number,
    params?: GetVaultApiV1VaultsVaultIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultApiV1VaultsVaultIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVaultApiV1VaultsVaultIdGetQueryKey(vaultId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVaultApiV1VaultsVaultIdGet>>> = ({ signal }) => getVaultApiV1VaultsVaultIdGet(vaultId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(vaultId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVaultApiV1VaultsVaultIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVaultApiV1VaultsVaultIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getVaultApiV1VaultsVaultIdGet>>>
export type GetVaultApiV1VaultsVaultIdGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Vault
 */
export const useGetVaultApiV1VaultsVaultIdGet = <TData = Awaited<ReturnType<typeof getVaultApiV1VaultsVaultIdGet>>, TError = AxiosError<HTTPValidationError>>(
 vaultId: number,
    params?: GetVaultApiV1VaultsVaultIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultApiV1VaultsVaultIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetVaultApiV1VaultsVaultIdGetQueryOptions(vaultId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Vault History Apy
 */
export const getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet = (
    vaultId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HistoryAPYResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/vaults/${vaultId}/history_apy`,options
    );
  }


export const getGetVaultHistoryApyApiV1VaultsVaultIdHistoryApyGetQueryKey = (vaultId: number,) => {
    return [`https://dapp-api.cybro.io/api/v1/vaults/${vaultId}/history_apy`] as const;
    }

    
export const getGetVaultHistoryApyApiV1VaultsVaultIdHistoryApyGetQueryOptions = <TData = Awaited<ReturnType<typeof getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet>>, TError = AxiosError<HTTPValidationError>>(vaultId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVaultHistoryApyApiV1VaultsVaultIdHistoryApyGetQueryKey(vaultId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet>>> = ({ signal }) => getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet(vaultId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(vaultId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVaultHistoryApyApiV1VaultsVaultIdHistoryApyGetQueryResult = NonNullable<Awaited<ReturnType<typeof getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet>>>
export type GetVaultHistoryApyApiV1VaultsVaultIdHistoryApyGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Vault History Apy
 */
export const useGetVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet = <TData = Awaited<ReturnType<typeof getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet>>, TError = AxiosError<HTTPValidationError>>(
 vaultId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultHistoryApyApiV1VaultsVaultIdHistoryApyGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetVaultHistoryApyApiV1VaultsVaultIdHistoryApyGetQueryOptions(vaultId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Vault History Trust Score
 */
export const getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet = (
    vaultId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HistoryTrustScoreResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/vaults/${vaultId}/history_trust_score`,options
    );
  }


export const getGetVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGetQueryKey = (vaultId: number,) => {
    return [`https://dapp-api.cybro.io/api/v1/vaults/${vaultId}/history_trust_score`] as const;
    }

    
export const getGetVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGetQueryOptions = <TData = Awaited<ReturnType<typeof getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet>>, TError = AxiosError<HTTPValidationError>>(vaultId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGetQueryKey(vaultId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet>>> = ({ signal }) => getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet(vaultId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(vaultId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGetQueryResult = NonNullable<Awaited<ReturnType<typeof getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet>>>
export type GetVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Vault History Trust Score
 */
export const useGetVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet = <TData = Awaited<ReturnType<typeof getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet>>, TError = AxiosError<HTTPValidationError>>(
 vaultId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetVaultHistoryTrustScoreApiV1VaultsVaultIdHistoryTrustScoreGetQueryOptions(vaultId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add Vault Action
 */
export const addVaultActionApiV1VaultsVaultIdActionPost = (
    vaultId: number,
    addActionBody: AddActionBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddActionResponse>> => {
    
    return axios.post(
      `https://dapp-api.cybro.io/api/v1/vaults/${vaultId}/action`,
      addActionBody,options
    );
  }



export const getAddVaultActionApiV1VaultsVaultIdActionPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addVaultActionApiV1VaultsVaultIdActionPost>>, TError,{vaultId: number;data: AddActionBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addVaultActionApiV1VaultsVaultIdActionPost>>, TError,{vaultId: number;data: AddActionBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addVaultActionApiV1VaultsVaultIdActionPost>>, {vaultId: number;data: AddActionBody}> = (props) => {
          const {vaultId,data} = props ?? {};

          return  addVaultActionApiV1VaultsVaultIdActionPost(vaultId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddVaultActionApiV1VaultsVaultIdActionPostMutationResult = NonNullable<Awaited<ReturnType<typeof addVaultActionApiV1VaultsVaultIdActionPost>>>
    export type AddVaultActionApiV1VaultsVaultIdActionPostMutationBody = AddActionBody
    export type AddVaultActionApiV1VaultsVaultIdActionPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Vault Action
 */
export const useAddVaultActionApiV1VaultsVaultIdActionPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addVaultActionApiV1VaultsVaultIdActionPost>>, TError,{vaultId: number;data: AddActionBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addVaultActionApiV1VaultsVaultIdActionPost>>,
        TError,
        {vaultId: number;data: AddActionBody},
        TContext
      > => {

      const mutationOptions = getAddVaultActionApiV1VaultsVaultIdActionPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Captcha
 */
export const captchaApiV1WaitlistCaptchaGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CaptchaResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/waitlist/captcha`,options
    );
  }


export const getCaptchaApiV1WaitlistCaptchaGetQueryKey = () => {
    return [`https://dapp-api.cybro.io/api/v1/waitlist/captcha`] as const;
    }

    
export const getCaptchaApiV1WaitlistCaptchaGetQueryOptions = <TData = Awaited<ReturnType<typeof captchaApiV1WaitlistCaptchaGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof captchaApiV1WaitlistCaptchaGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCaptchaApiV1WaitlistCaptchaGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof captchaApiV1WaitlistCaptchaGet>>> = ({ signal }) => captchaApiV1WaitlistCaptchaGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof captchaApiV1WaitlistCaptchaGet>>, TError, TData> & { queryKey: QueryKey }
}

export type CaptchaApiV1WaitlistCaptchaGetQueryResult = NonNullable<Awaited<ReturnType<typeof captchaApiV1WaitlistCaptchaGet>>>
export type CaptchaApiV1WaitlistCaptchaGetQueryError = AxiosError<unknown>

/**
 * @summary Captcha
 */
export const useCaptchaApiV1WaitlistCaptchaGet = <TData = Awaited<ReturnType<typeof captchaApiV1WaitlistCaptchaGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof captchaApiV1WaitlistCaptchaGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCaptchaApiV1WaitlistCaptchaGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add To Waitlist
 */
export const addToWaitlistApiV1WaitlistSignupPost = (
    bodyAddToWaitlistApiV1WaitlistSignupPost: BodyAddToWaitlistApiV1WaitlistSignupPost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WaitlistResponse>> => {
    
    return axios.post(
      `https://dapp-api.cybro.io/api/v1/waitlist/signup`,
      bodyAddToWaitlistApiV1WaitlistSignupPost,options
    );
  }



export const getAddToWaitlistApiV1WaitlistSignupPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToWaitlistApiV1WaitlistSignupPost>>, TError,{data: BodyAddToWaitlistApiV1WaitlistSignupPost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addToWaitlistApiV1WaitlistSignupPost>>, TError,{data: BodyAddToWaitlistApiV1WaitlistSignupPost}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addToWaitlistApiV1WaitlistSignupPost>>, {data: BodyAddToWaitlistApiV1WaitlistSignupPost}> = (props) => {
          const {data} = props ?? {};

          return  addToWaitlistApiV1WaitlistSignupPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddToWaitlistApiV1WaitlistSignupPostMutationResult = NonNullable<Awaited<ReturnType<typeof addToWaitlistApiV1WaitlistSignupPost>>>
    export type AddToWaitlistApiV1WaitlistSignupPostMutationBody = BodyAddToWaitlistApiV1WaitlistSignupPost
    export type AddToWaitlistApiV1WaitlistSignupPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add To Waitlist
 */
export const useAddToWaitlistApiV1WaitlistSignupPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToWaitlistApiV1WaitlistSignupPost>>, TError,{data: BodyAddToWaitlistApiV1WaitlistSignupPost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addToWaitlistApiV1WaitlistSignupPost>>,
        TError,
        {data: BodyAddToWaitlistApiV1WaitlistSignupPost},
        TContext
      > => {

      const mutationOptions = getAddToWaitlistApiV1WaitlistSignupPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Add Wallet
 */
export const addWalletApiV1ProfileAddressPut = (
    address: string,
    params: AddWalletApiV1ProfileAddressPutParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddWalletResponse>> => {
    
    return axios.put(
      `https://dapp-api.cybro.io/api/v1/profile/${address}`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getAddWalletApiV1ProfileAddressPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWalletApiV1ProfileAddressPut>>, TError,{address: string;params: AddWalletApiV1ProfileAddressPutParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addWalletApiV1ProfileAddressPut>>, TError,{address: string;params: AddWalletApiV1ProfileAddressPutParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addWalletApiV1ProfileAddressPut>>, {address: string;params: AddWalletApiV1ProfileAddressPutParams}> = (props) => {
          const {address,params} = props ?? {};

          return  addWalletApiV1ProfileAddressPut(address,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddWalletApiV1ProfileAddressPutMutationResult = NonNullable<Awaited<ReturnType<typeof addWalletApiV1ProfileAddressPut>>>
    
    export type AddWalletApiV1ProfileAddressPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Wallet
 */
export const useAddWalletApiV1ProfileAddressPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWalletApiV1ProfileAddressPut>>, TError,{address: string;params: AddWalletApiV1ProfileAddressPutParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addWalletApiV1ProfileAddressPut>>,
        TError,
        {address: string;params: AddWalletApiV1ProfileAddressPutParams},
        TContext
      > => {

      const mutationOptions = getAddWalletApiV1ProfileAddressPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Profile
 */
export const getProfileApiV1ProfileAddressGet = (
    address: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetWalletResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/profile/${address}`,options
    );
  }


export const getGetProfileApiV1ProfileAddressGetQueryKey = (address: string,) => {
    return [`https://dapp-api.cybro.io/api/v1/profile/${address}`] as const;
    }

    
export const getGetProfileApiV1ProfileAddressGetQueryOptions = <TData = Awaited<ReturnType<typeof getProfileApiV1ProfileAddressGet>>, TError = AxiosError<HTTPValidationError>>(address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileApiV1ProfileAddressGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileApiV1ProfileAddressGetQueryKey(address);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileApiV1ProfileAddressGet>>> = ({ signal }) => getProfileApiV1ProfileAddressGet(address, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfileApiV1ProfileAddressGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfileApiV1ProfileAddressGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileApiV1ProfileAddressGet>>>
export type GetProfileApiV1ProfileAddressGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Profile
 */
export const useGetProfileApiV1ProfileAddressGet = <TData = Awaited<ReturnType<typeof getProfileApiV1ProfileAddressGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileApiV1ProfileAddressGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProfileApiV1ProfileAddressGetQueryOptions(address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Profile Points
 */
export const getProfilePointsApiV1ProfileAddressPointsGet = (
    address: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProfilePointsResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/profile/${address}/points`,options
    );
  }


export const getGetProfilePointsApiV1ProfileAddressPointsGetQueryKey = (address: string,) => {
    return [`https://dapp-api.cybro.io/api/v1/profile/${address}/points`] as const;
    }

    
export const getGetProfilePointsApiV1ProfileAddressPointsGetQueryOptions = <TData = Awaited<ReturnType<typeof getProfilePointsApiV1ProfileAddressPointsGet>>, TError = AxiosError<HTTPValidationError>>(address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfilePointsApiV1ProfileAddressPointsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfilePointsApiV1ProfileAddressPointsGetQueryKey(address);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfilePointsApiV1ProfileAddressPointsGet>>> = ({ signal }) => getProfilePointsApiV1ProfileAddressPointsGet(address, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfilePointsApiV1ProfileAddressPointsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfilePointsApiV1ProfileAddressPointsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProfilePointsApiV1ProfileAddressPointsGet>>>
export type GetProfilePointsApiV1ProfileAddressPointsGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Profile Points
 */
export const useGetProfilePointsApiV1ProfileAddressPointsGet = <TData = Awaited<ReturnType<typeof getProfilePointsApiV1ProfileAddressPointsGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfilePointsApiV1ProfileAddressPointsGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProfilePointsApiV1ProfileAddressPointsGetQueryOptions(address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Balance By Address
 */
export const getBalanceByAddressApiV1ProfileAddressBalanceGet = (
    address: string,
    params: GetBalanceByAddressApiV1ProfileAddressBalanceGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BalancesResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/profile/${address}/balance`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetBalanceByAddressApiV1ProfileAddressBalanceGetQueryKey = (address: string,
    params: GetBalanceByAddressApiV1ProfileAddressBalanceGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/profile/${address}/balance`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBalanceByAddressApiV1ProfileAddressBalanceGetQueryOptions = <TData = Awaited<ReturnType<typeof getBalanceByAddressApiV1ProfileAddressBalanceGet>>, TError = AxiosError<HTTPValidationError>>(address: string,
    params: GetBalanceByAddressApiV1ProfileAddressBalanceGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBalanceByAddressApiV1ProfileAddressBalanceGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBalanceByAddressApiV1ProfileAddressBalanceGetQueryKey(address,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBalanceByAddressApiV1ProfileAddressBalanceGet>>> = ({ signal }) => getBalanceByAddressApiV1ProfileAddressBalanceGet(address,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBalanceByAddressApiV1ProfileAddressBalanceGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBalanceByAddressApiV1ProfileAddressBalanceGetQueryResult = NonNullable<Awaited<ReturnType<typeof getBalanceByAddressApiV1ProfileAddressBalanceGet>>>
export type GetBalanceByAddressApiV1ProfileAddressBalanceGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Balance By Address
 */
export const useGetBalanceByAddressApiV1ProfileAddressBalanceGet = <TData = Awaited<ReturnType<typeof getBalanceByAddressApiV1ProfileAddressBalanceGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string,
    params: GetBalanceByAddressApiV1ProfileAddressBalanceGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBalanceByAddressApiV1ProfileAddressBalanceGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetBalanceByAddressApiV1ProfileAddressBalanceGetQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Profile Refcode
 */
export const getProfileRefcodeApiV1ProfileAddressRefcodeGet = (
    address: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RefCodeResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/profile/${address}/refcode`,options
    );
  }


export const getGetProfileRefcodeApiV1ProfileAddressRefcodeGetQueryKey = (address: string,) => {
    return [`https://dapp-api.cybro.io/api/v1/profile/${address}/refcode`] as const;
    }

    
export const getGetProfileRefcodeApiV1ProfileAddressRefcodeGetQueryOptions = <TData = Awaited<ReturnType<typeof getProfileRefcodeApiV1ProfileAddressRefcodeGet>>, TError = AxiosError<HTTPValidationError>>(address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileRefcodeApiV1ProfileAddressRefcodeGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileRefcodeApiV1ProfileAddressRefcodeGetQueryKey(address);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileRefcodeApiV1ProfileAddressRefcodeGet>>> = ({ signal }) => getProfileRefcodeApiV1ProfileAddressRefcodeGet(address, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfileRefcodeApiV1ProfileAddressRefcodeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfileRefcodeApiV1ProfileAddressRefcodeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileRefcodeApiV1ProfileAddressRefcodeGet>>>
export type GetProfileRefcodeApiV1ProfileAddressRefcodeGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Profile Refcode
 */
export const useGetProfileRefcodeApiV1ProfileAddressRefcodeGet = <TData = Awaited<ReturnType<typeof getProfileRefcodeApiV1ProfileAddressRefcodeGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileRefcodeApiV1ProfileAddressRefcodeGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProfileRefcodeApiV1ProfileAddressRefcodeGetQueryOptions(address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Profile Earned Yield
 */
export const getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet = (
    address: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EarnedYieldResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/profile/${address}/earned-yield`,options
    );
  }


export const getGetProfileEarnedYieldApiV1ProfileAddressEarnedYieldGetQueryKey = (address: string,) => {
    return [`https://dapp-api.cybro.io/api/v1/profile/${address}/earned-yield`] as const;
    }

    
export const getGetProfileEarnedYieldApiV1ProfileAddressEarnedYieldGetQueryOptions = <TData = Awaited<ReturnType<typeof getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet>>, TError = AxiosError<HTTPValidationError>>(address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileEarnedYieldApiV1ProfileAddressEarnedYieldGetQueryKey(address);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet>>> = ({ signal }) => getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet(address, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfileEarnedYieldApiV1ProfileAddressEarnedYieldGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet>>>
export type GetProfileEarnedYieldApiV1ProfileAddressEarnedYieldGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Profile Earned Yield
 */
export const useGetProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet = <TData = Awaited<ReturnType<typeof getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileEarnedYieldApiV1ProfileAddressEarnedYieldGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProfileEarnedYieldApiV1ProfileAddressEarnedYieldGetQueryOptions(address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Payment Link
 */
export const getPaymentLinkApiV1ProfileAddressPaymentLinkGet = (
    address: string,
    params: GetPaymentLinkApiV1ProfileAddressPaymentLinkGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaymentLinkResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/profile/${address}/payment-link`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPaymentLinkApiV1ProfileAddressPaymentLinkGetQueryKey = (address: string,
    params: GetPaymentLinkApiV1ProfileAddressPaymentLinkGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/profile/${address}/payment-link`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPaymentLinkApiV1ProfileAddressPaymentLinkGetQueryOptions = <TData = Awaited<ReturnType<typeof getPaymentLinkApiV1ProfileAddressPaymentLinkGet>>, TError = AxiosError<HTTPValidationError>>(address: string,
    params: GetPaymentLinkApiV1ProfileAddressPaymentLinkGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentLinkApiV1ProfileAddressPaymentLinkGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPaymentLinkApiV1ProfileAddressPaymentLinkGetQueryKey(address,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPaymentLinkApiV1ProfileAddressPaymentLinkGet>>> = ({ signal }) => getPaymentLinkApiV1ProfileAddressPaymentLinkGet(address,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPaymentLinkApiV1ProfileAddressPaymentLinkGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPaymentLinkApiV1ProfileAddressPaymentLinkGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPaymentLinkApiV1ProfileAddressPaymentLinkGet>>>
export type GetPaymentLinkApiV1ProfileAddressPaymentLinkGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Payment Link
 */
export const useGetPaymentLinkApiV1ProfileAddressPaymentLinkGet = <TData = Awaited<ReturnType<typeof getPaymentLinkApiV1ProfileAddressPaymentLinkGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string,
    params: GetPaymentLinkApiV1ProfileAddressPaymentLinkGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentLinkApiV1ProfileAddressPaymentLinkGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPaymentLinkApiV1ProfileAddressPaymentLinkGetQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Price
 */
export const getPriceApiV1MarketDataPriceGet = (
    params: GetPriceApiV1MarketDataPriceGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PriceResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/market_data/price`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPriceApiV1MarketDataPriceGetQueryKey = (params: GetPriceApiV1MarketDataPriceGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/market_data/price`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPriceApiV1MarketDataPriceGetQueryOptions = <TData = Awaited<ReturnType<typeof getPriceApiV1MarketDataPriceGet>>, TError = AxiosError<HTTPValidationError>>(params: GetPriceApiV1MarketDataPriceGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceApiV1MarketDataPriceGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceApiV1MarketDataPriceGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceApiV1MarketDataPriceGet>>> = ({ signal }) => getPriceApiV1MarketDataPriceGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceApiV1MarketDataPriceGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPriceApiV1MarketDataPriceGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceApiV1MarketDataPriceGet>>>
export type GetPriceApiV1MarketDataPriceGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Price
 */
export const useGetPriceApiV1MarketDataPriceGet = <TData = Awaited<ReturnType<typeof getPriceApiV1MarketDataPriceGet>>, TError = AxiosError<HTTPValidationError>>(
 params: GetPriceApiV1MarketDataPriceGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceApiV1MarketDataPriceGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPriceApiV1MarketDataPriceGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Tvl
 */
export const getTvlApiV1CommonTvlGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TVLResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/common/tvl`,options
    );
  }


export const getGetTvlApiV1CommonTvlGetQueryKey = () => {
    return [`https://dapp-api.cybro.io/api/v1/common/tvl`] as const;
    }

    
export const getGetTvlApiV1CommonTvlGetQueryOptions = <TData = Awaited<ReturnType<typeof getTvlApiV1CommonTvlGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTvlApiV1CommonTvlGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTvlApiV1CommonTvlGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTvlApiV1CommonTvlGet>>> = ({ signal }) => getTvlApiV1CommonTvlGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTvlApiV1CommonTvlGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTvlApiV1CommonTvlGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTvlApiV1CommonTvlGet>>>
export type GetTvlApiV1CommonTvlGetQueryError = AxiosError<unknown>

/**
 * @summary Get Tvl
 */
export const useGetTvlApiV1CommonTvlGet = <TData = Awaited<ReturnType<typeof getTvlApiV1CommonTvlGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTvlApiV1CommonTvlGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTvlApiV1CommonTvlGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Collect Feedback
 */
export const collectFeedbackApiV1CommonFeedbackPost = (
    feedbackBody: FeedbackBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FeedbackResponse>> => {
    
    return axios.post(
      `https://dapp-api.cybro.io/api/v1/common/feedback`,
      feedbackBody,options
    );
  }



export const getCollectFeedbackApiV1CommonFeedbackPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof collectFeedbackApiV1CommonFeedbackPost>>, TError,{data: FeedbackBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof collectFeedbackApiV1CommonFeedbackPost>>, TError,{data: FeedbackBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof collectFeedbackApiV1CommonFeedbackPost>>, {data: FeedbackBody}> = (props) => {
          const {data} = props ?? {};

          return  collectFeedbackApiV1CommonFeedbackPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CollectFeedbackApiV1CommonFeedbackPostMutationResult = NonNullable<Awaited<ReturnType<typeof collectFeedbackApiV1CommonFeedbackPost>>>
    export type CollectFeedbackApiV1CommonFeedbackPostMutationBody = FeedbackBody
    export type CollectFeedbackApiV1CommonFeedbackPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Collect Feedback
 */
export const useCollectFeedbackApiV1CommonFeedbackPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof collectFeedbackApiV1CommonFeedbackPost>>, TError,{data: FeedbackBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof collectFeedbackApiV1CommonFeedbackPost>>,
        TError,
        {data: FeedbackBody},
        TContext
      > => {

      const mutationOptions = getCollectFeedbackApiV1CommonFeedbackPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Munzen Currencies
 */
export const getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MunzenCurrenciesResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/common/munzen-currencies`,options
    );
  }


export const getGetMunzenCurrenciesApiV1CommonMunzenCurrenciesGetQueryKey = () => {
    return [`https://dapp-api.cybro.io/api/v1/common/munzen-currencies`] as const;
    }

    
export const getGetMunzenCurrenciesApiV1CommonMunzenCurrenciesGetQueryOptions = <TData = Awaited<ReturnType<typeof getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMunzenCurrenciesApiV1CommonMunzenCurrenciesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet>>> = ({ signal }) => getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMunzenCurrenciesApiV1CommonMunzenCurrenciesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet>>>
export type GetMunzenCurrenciesApiV1CommonMunzenCurrenciesGetQueryError = AxiosError<unknown>

/**
 * @summary Get Munzen Currencies
 */
export const useGetMunzenCurrenciesApiV1CommonMunzenCurrenciesGet = <TData = Awaited<ReturnType<typeof getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMunzenCurrenciesApiV1CommonMunzenCurrenciesGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMunzenCurrenciesApiV1CommonMunzenCurrenciesGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Webhook Handler
 */
export const webhookHandlerApiV1CommonMunzenWebhookPost = (
    bodyWebhookHandlerApiV1CommonMunzenWebhookPost: BodyWebhookHandlerApiV1CommonMunzenWebhookPost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.post(
      `https://dapp-api.cybro.io/api/v1/common/munzen-webhook`,
      bodyWebhookHandlerApiV1CommonMunzenWebhookPost,options
    );
  }



export const getWebhookHandlerApiV1CommonMunzenWebhookPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof webhookHandlerApiV1CommonMunzenWebhookPost>>, TError,{data: BodyWebhookHandlerApiV1CommonMunzenWebhookPost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof webhookHandlerApiV1CommonMunzenWebhookPost>>, TError,{data: BodyWebhookHandlerApiV1CommonMunzenWebhookPost}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof webhookHandlerApiV1CommonMunzenWebhookPost>>, {data: BodyWebhookHandlerApiV1CommonMunzenWebhookPost}> = (props) => {
          const {data} = props ?? {};

          return  webhookHandlerApiV1CommonMunzenWebhookPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WebhookHandlerApiV1CommonMunzenWebhookPostMutationResult = NonNullable<Awaited<ReturnType<typeof webhookHandlerApiV1CommonMunzenWebhookPost>>>
    export type WebhookHandlerApiV1CommonMunzenWebhookPostMutationBody = BodyWebhookHandlerApiV1CommonMunzenWebhookPost
    export type WebhookHandlerApiV1CommonMunzenWebhookPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Webhook Handler
 */
export const useWebhookHandlerApiV1CommonMunzenWebhookPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof webhookHandlerApiV1CommonMunzenWebhookPost>>, TError,{data: BodyWebhookHandlerApiV1CommonMunzenWebhookPost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof webhookHandlerApiV1CommonMunzenWebhookPost>>,
        TError,
        {data: BodyWebhookHandlerApiV1CommonMunzenWebhookPost},
        TContext
      > => {

      const mutationOptions = getWebhookHandlerApiV1CommonMunzenWebhookPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Dashboard History
 */
export const getDashboardHistoryApiV1DashboardAddressHistoryGet = (
    address: string,
    params: GetDashboardHistoryApiV1DashboardAddressHistoryGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DashboardHistoryResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/dashboard/${address}/history`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetDashboardHistoryApiV1DashboardAddressHistoryGetQueryKey = (address: string,
    params: GetDashboardHistoryApiV1DashboardAddressHistoryGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/dashboard/${address}/history`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDashboardHistoryApiV1DashboardAddressHistoryGetQueryOptions = <TData = Awaited<ReturnType<typeof getDashboardHistoryApiV1DashboardAddressHistoryGet>>, TError = AxiosError<HTTPValidationError>>(address: string,
    params: GetDashboardHistoryApiV1DashboardAddressHistoryGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardHistoryApiV1DashboardAddressHistoryGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDashboardHistoryApiV1DashboardAddressHistoryGetQueryKey(address,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboardHistoryApiV1DashboardAddressHistoryGet>>> = ({ signal }) => getDashboardHistoryApiV1DashboardAddressHistoryGet(address,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDashboardHistoryApiV1DashboardAddressHistoryGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDashboardHistoryApiV1DashboardAddressHistoryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDashboardHistoryApiV1DashboardAddressHistoryGet>>>
export type GetDashboardHistoryApiV1DashboardAddressHistoryGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Dashboard History
 */
export const useGetDashboardHistoryApiV1DashboardAddressHistoryGet = <TData = Awaited<ReturnType<typeof getDashboardHistoryApiV1DashboardAddressHistoryGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string,
    params: GetDashboardHistoryApiV1DashboardAddressHistoryGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardHistoryApiV1DashboardAddressHistoryGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDashboardHistoryApiV1DashboardAddressHistoryGetQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Dashboard Stats
 */
export const getDashboardStatsApiV1DashboardAddressStatsGet = (
    address: string,
    params: GetDashboardStatsApiV1DashboardAddressStatsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DashboardStatsResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/dashboard/${address}/stats`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetDashboardStatsApiV1DashboardAddressStatsGetQueryKey = (address: string,
    params: GetDashboardStatsApiV1DashboardAddressStatsGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/dashboard/${address}/stats`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDashboardStatsApiV1DashboardAddressStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getDashboardStatsApiV1DashboardAddressStatsGet>>, TError = AxiosError<HTTPValidationError>>(address: string,
    params: GetDashboardStatsApiV1DashboardAddressStatsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardStatsApiV1DashboardAddressStatsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDashboardStatsApiV1DashboardAddressStatsGetQueryKey(address,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboardStatsApiV1DashboardAddressStatsGet>>> = ({ signal }) => getDashboardStatsApiV1DashboardAddressStatsGet(address,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDashboardStatsApiV1DashboardAddressStatsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDashboardStatsApiV1DashboardAddressStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDashboardStatsApiV1DashboardAddressStatsGet>>>
export type GetDashboardStatsApiV1DashboardAddressStatsGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Dashboard Stats
 */
export const useGetDashboardStatsApiV1DashboardAddressStatsGet = <TData = Awaited<ReturnType<typeof getDashboardStatsApiV1DashboardAddressStatsGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string,
    params: GetDashboardStatsApiV1DashboardAddressStatsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardStatsApiV1DashboardAddressStatsGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDashboardStatsApiV1DashboardAddressStatsGetQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Posts
 */
export const getPostsApiV1DashboardPostsGet = (
    params?: GetPostsApiV1DashboardPostsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostsResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/dashboard/posts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPostsApiV1DashboardPostsGetQueryKey = (params?: GetPostsApiV1DashboardPostsGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/dashboard/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPostsApiV1DashboardPostsGetQueryOptions = <TData = Awaited<ReturnType<typeof getPostsApiV1DashboardPostsGet>>, TError = AxiosError<HTTPValidationError>>(params?: GetPostsApiV1DashboardPostsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsApiV1DashboardPostsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsApiV1DashboardPostsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsApiV1DashboardPostsGet>>> = ({ signal }) => getPostsApiV1DashboardPostsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPostsApiV1DashboardPostsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsApiV1DashboardPostsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsApiV1DashboardPostsGet>>>
export type GetPostsApiV1DashboardPostsGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Posts
 */
export const useGetPostsApiV1DashboardPostsGet = <TData = Awaited<ReturnType<typeof getPostsApiV1DashboardPostsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: GetPostsApiV1DashboardPostsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsApiV1DashboardPostsGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPostsApiV1DashboardPostsGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Transactions
 */
export const getTransactionsApiV1ExchangeAddressTransactionsGet = (
    address: string,
    params: GetTransactionsApiV1ExchangeAddressTransactionsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExchangeGetTransactionsResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/exchange/${address}/transactions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetTransactionsApiV1ExchangeAddressTransactionsGetQueryKey = (address: string,
    params: GetTransactionsApiV1ExchangeAddressTransactionsGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/exchange/${address}/transactions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTransactionsApiV1ExchangeAddressTransactionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTransactionsApiV1ExchangeAddressTransactionsGet>>, TError = AxiosError<HTTPValidationError>>(address: string,
    params: GetTransactionsApiV1ExchangeAddressTransactionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsApiV1ExchangeAddressTransactionsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionsApiV1ExchangeAddressTransactionsGetQueryKey(address,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactionsApiV1ExchangeAddressTransactionsGet>>> = ({ signal }) => getTransactionsApiV1ExchangeAddressTransactionsGet(address,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransactionsApiV1ExchangeAddressTransactionsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTransactionsApiV1ExchangeAddressTransactionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactionsApiV1ExchangeAddressTransactionsGet>>>
export type GetTransactionsApiV1ExchangeAddressTransactionsGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Transactions
 */
export const useGetTransactionsApiV1ExchangeAddressTransactionsGet = <TData = Awaited<ReturnType<typeof getTransactionsApiV1ExchangeAddressTransactionsGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string,
    params: GetTransactionsApiV1ExchangeAddressTransactionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsApiV1ExchangeAddressTransactionsGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTransactionsApiV1ExchangeAddressTransactionsGetQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Transaction
 */
export const createTransactionApiV1ExchangeAddressTransactionsPost = (
    address: string,
    symbiosisData: SymbiosisData, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExchangeCreateTransactionResponse>> => {
    
    return axios.post(
      `https://dapp-api.cybro.io/api/v1/exchange/${address}/transactions`,
      symbiosisData,options
    );
  }



export const getCreateTransactionApiV1ExchangeAddressTransactionsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressTransactionsPost>>, TError,{address: string;data: SymbiosisData}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressTransactionsPost>>, TError,{address: string;data: SymbiosisData}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressTransactionsPost>>, {address: string;data: SymbiosisData}> = (props) => {
          const {address,data} = props ?? {};

          return  createTransactionApiV1ExchangeAddressTransactionsPost(address,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTransactionApiV1ExchangeAddressTransactionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressTransactionsPost>>>
    export type CreateTransactionApiV1ExchangeAddressTransactionsPostMutationBody = SymbiosisData
    export type CreateTransactionApiV1ExchangeAddressTransactionsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Transaction
 */
export const useCreateTransactionApiV1ExchangeAddressTransactionsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressTransactionsPost>>, TError,{address: string;data: SymbiosisData}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressTransactionsPost>>,
        TError,
        {address: string;data: SymbiosisData},
        TContext
      > => {

      const mutationOptions = getCreateTransactionApiV1ExchangeAddressTransactionsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create Transaction
 */
export const createTransactionApiV1ExchangeAddressCountGet = (
    address: string,
    params: CreateTransactionApiV1ExchangeAddressCountGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExchangeCountTransactionsResponse>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/exchange/${address}/count`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCreateTransactionApiV1ExchangeAddressCountGetQueryKey = (address: string,
    params: CreateTransactionApiV1ExchangeAddressCountGetParams,) => {
    return [`https://dapp-api.cybro.io/api/v1/exchange/${address}/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCreateTransactionApiV1ExchangeAddressCountGetQueryOptions = <TData = Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressCountGet>>, TError = AxiosError<HTTPValidationError>>(address: string,
    params: CreateTransactionApiV1ExchangeAddressCountGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressCountGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCreateTransactionApiV1ExchangeAddressCountGetQueryKey(address,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressCountGet>>> = ({ signal }) => createTransactionApiV1ExchangeAddressCountGet(address,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressCountGet>>, TError, TData> & { queryKey: QueryKey }
}

export type CreateTransactionApiV1ExchangeAddressCountGetQueryResult = NonNullable<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressCountGet>>>
export type CreateTransactionApiV1ExchangeAddressCountGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Create Transaction
 */
export const useCreateTransactionApiV1ExchangeAddressCountGet = <TData = Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressCountGet>>, TError = AxiosError<HTTPValidationError>>(
 address: string,
    params: CreateTransactionApiV1ExchangeAddressCountGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createTransactionApiV1ExchangeAddressCountGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCreateTransactionApiV1ExchangeAddressCountGetQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Currencies
 */
export const getCurrenciesApiV1MunzenCurrenciesGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/munzen/currencies`,options
    );
  }


export const getGetCurrenciesApiV1MunzenCurrenciesGetQueryKey = () => {
    return [`https://dapp-api.cybro.io/api/v1/munzen/currencies`] as const;
    }

    
export const getGetCurrenciesApiV1MunzenCurrenciesGetQueryOptions = <TData = Awaited<ReturnType<typeof getCurrenciesApiV1MunzenCurrenciesGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesApiV1MunzenCurrenciesGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrenciesApiV1MunzenCurrenciesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrenciesApiV1MunzenCurrenciesGet>>> = ({ signal }) => getCurrenciesApiV1MunzenCurrenciesGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesApiV1MunzenCurrenciesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrenciesApiV1MunzenCurrenciesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrenciesApiV1MunzenCurrenciesGet>>>
export type GetCurrenciesApiV1MunzenCurrenciesGetQueryError = AxiosError<unknown>

/**
 * @summary Get Currencies
 */
export const useGetCurrenciesApiV1MunzenCurrenciesGet = <TData = Awaited<ReturnType<typeof getCurrenciesApiV1MunzenCurrenciesGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesApiV1MunzenCurrenciesGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCurrenciesApiV1MunzenCurrenciesGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Fees
 */
export const getFeesApiV1MunzenCurrenciesFeesInstrumentGet = (
    instrument: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/munzen/currencies/fees/${instrument}`,options
    );
  }


export const getGetFeesApiV1MunzenCurrenciesFeesInstrumentGetQueryKey = (instrument: string,) => {
    return [`https://dapp-api.cybro.io/api/v1/munzen/currencies/fees/${instrument}`] as const;
    }

    
export const getGetFeesApiV1MunzenCurrenciesFeesInstrumentGetQueryOptions = <TData = Awaited<ReturnType<typeof getFeesApiV1MunzenCurrenciesFeesInstrumentGet>>, TError = AxiosError<HTTPValidationError>>(instrument: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeesApiV1MunzenCurrenciesFeesInstrumentGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeesApiV1MunzenCurrenciesFeesInstrumentGetQueryKey(instrument);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeesApiV1MunzenCurrenciesFeesInstrumentGet>>> = ({ signal }) => getFeesApiV1MunzenCurrenciesFeesInstrumentGet(instrument, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(instrument), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFeesApiV1MunzenCurrenciesFeesInstrumentGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFeesApiV1MunzenCurrenciesFeesInstrumentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getFeesApiV1MunzenCurrenciesFeesInstrumentGet>>>
export type GetFeesApiV1MunzenCurrenciesFeesInstrumentGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Fees
 */
export const useGetFeesApiV1MunzenCurrenciesFeesInstrumentGet = <TData = Awaited<ReturnType<typeof getFeesApiV1MunzenCurrenciesFeesInstrumentGet>>, TError = AxiosError<HTTPValidationError>>(
 instrument: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeesApiV1MunzenCurrenciesFeesInstrumentGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetFeesApiV1MunzenCurrenciesFeesInstrumentGetQueryOptions(instrument,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Rates
 */
export const getRatesApiV1MunzenCurrenciesRatesGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/api/v1/munzen/currencies/rates`,options
    );
  }


export const getGetRatesApiV1MunzenCurrenciesRatesGetQueryKey = () => {
    return [`https://dapp-api.cybro.io/api/v1/munzen/currencies/rates`] as const;
    }

    
export const getGetRatesApiV1MunzenCurrenciesRatesGetQueryOptions = <TData = Awaited<ReturnType<typeof getRatesApiV1MunzenCurrenciesRatesGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatesApiV1MunzenCurrenciesRatesGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRatesApiV1MunzenCurrenciesRatesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRatesApiV1MunzenCurrenciesRatesGet>>> = ({ signal }) => getRatesApiV1MunzenCurrenciesRatesGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRatesApiV1MunzenCurrenciesRatesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRatesApiV1MunzenCurrenciesRatesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRatesApiV1MunzenCurrenciesRatesGet>>>
export type GetRatesApiV1MunzenCurrenciesRatesGetQueryError = AxiosError<unknown>

/**
 * @summary Get Rates
 */
export const useGetRatesApiV1MunzenCurrenciesRatesGet = <TData = Awaited<ReturnType<typeof getRatesApiV1MunzenCurrenciesRatesGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatesApiV1MunzenCurrenciesRatesGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRatesApiV1MunzenCurrenciesRatesGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Main
 */
export const mainGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.get(
      `https://dapp-api.cybro.io/`,options
    );
  }


export const getMainGetQueryKey = () => {
    return [`https://dapp-api.cybro.io/`] as const;
    }

    
export const getMainGetQueryOptions = <TData = Awaited<ReturnType<typeof mainGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mainGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMainGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mainGet>>> = ({ signal }) => mainGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mainGet>>, TError, TData> & { queryKey: QueryKey }
}

export type MainGetQueryResult = NonNullable<Awaited<ReturnType<typeof mainGet>>>
export type MainGetQueryError = AxiosError<unknown>

/**
 * @summary Main
 */
export const useMainGet = <TData = Awaited<ReturnType<typeof mainGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mainGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMainGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




